// Code generated by MockGen. DO NOT EDIT.
// Source: ./nostr.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nostr "github.com/nbd-wtf/go-nostr"
)

// MockNostrClient is a mock of NostrClient interface.
type MockNostrClient struct {
	ctrl     *gomock.Controller
	recorder *MockNostrClientMockRecorder
}

// MockNostrClientMockRecorder is the mock recorder for MockNostrClient.
type MockNostrClientMockRecorder struct {
	mock *MockNostrClient
}

// NewMockNostrClient creates a new mock instance.
func NewMockNostrClient(ctrl *gomock.Controller) *MockNostrClient {
	mock := &MockNostrClient{ctrl: ctrl}
	mock.recorder = &MockNostrClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNostrClient) EXPECT() *MockNostrClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockNostrClient) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockNostrClientMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockNostrClient)(nil).Connect), ctx)
}

// ConnectURL mocks base method.
func (m *MockNostrClient) ConnectURL(ctx context.Context, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectURL", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectURL indicates an expected call of ConnectURL.
func (mr *MockNostrClientMockRecorder) ConnectURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectURL", reflect.TypeOf((*MockNostrClient)(nil).ConnectURL), ctx, url)
}

// Disconnect mocks base method.
func (m *MockNostrClient) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockNostrClientMockRecorder) Disconnect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockNostrClient)(nil).Disconnect), ctx)
}

// GetClient mocks base method.
func (m *MockNostrClient) GetClient() *nostr.Relay {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*nostr.Relay)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockNostrClientMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockNostrClient)(nil).GetClient))
}

// Publish mocks base method.
func (m *MockNostrClient) Publish(ctx context.Context, e nostr.Event) (nostr.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, e)
	ret0, _ := ret[0].(nostr.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockNostrClientMockRecorder) Publish(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNostrClient)(nil).Publish), ctx, e)
}

// Subscribe mocks base method.
func (m *MockNostrClient) Subscribe(ctx context.Context, filters nostr.Filters) (*nostr.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, filters)
	ret0, _ := ret[0].(*nostr.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNostrClientMockRecorder) Subscribe(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNostrClient)(nil).Subscribe), ctx, filters)
}
