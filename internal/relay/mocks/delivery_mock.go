// Code generated by MockGen. DO NOT EDIT.
// Source: ./delivery.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	melody "gopkg.in/olahol/melody.v1"
)

// MockNotification is a mock of Notification interface.
type MockNotification struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationMockRecorder
}

// MockNotificationMockRecorder is the mock recorder for MockNotification.
type MockNotificationMockRecorder struct {
	mock *MockNotification
}

// NewMockNotification creates a new mock instance.
func NewMockNotification(ctrl *gomock.Controller) *MockNotification {
	mock := &MockNotification{ctrl: ctrl}
	mock.recorder = &MockNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotification) EXPECT() *MockNotificationMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockNotification) Broadcast(ctx context.Context, msg []interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", ctx, msg)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockNotificationMockRecorder) Broadcast(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockNotification)(nil).Broadcast), ctx, msg)
}

// Subscribe mocks base method.
func (m *MockNotification) Subscribe(ctx context.Context, id string, s *melody.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", ctx, id, s)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNotificationMockRecorder) Subscribe(ctx, id, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNotification)(nil).Subscribe), ctx, id, s)
}

// UnSubscribe mocks base method.
func (m *MockNotification) UnSubscribe(ctx context.Context, id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnSubscribe", ctx, id)
}

// UnSubscribe indicates an expected call of UnSubscribe.
func (mr *MockNotificationMockRecorder) UnSubscribe(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribe", reflect.TypeOf((*MockNotification)(nil).UnSubscribe), ctx, id)
}
